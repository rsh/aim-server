# Caddyfile configuration for Retro AIM Server
# Add these blocks to your main Caddyfile
# Replace example.com with your actual domain

# Management API - Web-based administration
# Uses subdomain: aim.example.com
aim.example.com {
    reverse_proxy retro-aim-server:8080

    # Enable compression
    encode gzip zstd

    # Restrict access to management API with basic auth
    # IMPORTANT: Replace the hash below with the one from .admin-credentials
    # Generated during setup.sh
    # TIMESTAMP_PLACEHOLDER
    basicauth {
        admin YOUR_BCRYPT_HASH_HERE
    }

    # Security headers
    header {
        # Enable HSTS
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        # Prevent XSS attacks
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        # Referrer policy
        Referrer-Policy "strict-origin-when-cross-origin"
    }
}

# Obtain certificate for chat subdomain (for stunnel to use)
# Uses subdomain: chat.example.com
# This route doesn't serve any content - it just gets a Let's Encrypt certificate
# that stunnel will use for OSCAR/TOC SSL connections
chat.example.com {
    respond "AIM Server - Use ports 5193 (OSCAR) or 9899 (TOC) for encrypted chat" 200
}

# SSL/TLS for OSCAR and TOC protocols:
# Caddy automatically obtains Let's Encrypt certificates for both subdomains:
#   - aim.example.com (for Management API HTTPS)
#   - chat.example.com (for OSCAR/TOC SSL via stunnel)
# stunnel uses the chat.example.com certificate for encrypted connections
# No additional certificate work needed - Caddy handles everything!
#
# Client Configuration:
#   Management API:  https://aim.example.com (HTTPS)
#   OSCAR plain:     chat.example.com:5190 (no encryption, legacy clients)
#   OSCAR SSL:       chat.example.com:5193 (encrypted via stunnel)
#   TOC plain:       chat.example.com:9898 (no encryption, legacy clients)
#   TOC SSL:         chat.example.com:9899 (encrypted via stunnel)
